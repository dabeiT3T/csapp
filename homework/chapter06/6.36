
A. B = 16, E = 1, S = 512/16 = 32
   128*4 = 512, so the cache can hold the x[0]
   x[0][0]~x[0][3] => S0
   x[0][4]~x[0][7] => s1
   ...
   x[0][124]~x[0][127] => s31
   so does x[1]
   x[1][0]~x[1][3] => S0
   ...
   x[1][124]~x[1][127] => s31
   as a result, x[0][i] and x[1][i] use the same cache block.
   => 100% missing rate.
B. 128*4*2 = 1024, so the cache can hold the x
   x[0][0]~x[0][3] => S0
   ...
   x[1][0]~x[1][3] => s32
   ...
   so in the block the first time read will miss.
   => 25% missing rate.
C. B = 16, E = 2, S = 512/32 = 16
   128*4 = 512, so the cache can hold the x[0], but
   x[0][0]~x[0][3], x[0][64]~x[0][67] => S0
   x[0][4]~x[0][7], x[0][68]~x[0][71] => S1
   ...
   x[0][60]~x[0][63], x[0][124]~x[0][127] => s15
   so does x[1]
   x[0][0] => miss and cache s0 block0
   x[1][0] => miss and cache s0 block1
   x[0][1]~x[0][3] hit the cache
   x[1][1]~x[1][3] hit the cache
   ...
   x[0][64] => miss and cache s0 block0
   x[1][64] => miss and cache s0 block1
   => 25% missing rate.
D. no.
   suppose S = 1024, so that the cache can hold the x[0]
   x[0][0]~x[0][3] => S0
   x[0][124]~x[0][127] => s31
   so does x[1]
   x[0][0] => miss and cache s0 block0
   x[1][0] => miss and cache s0 block1
   x[0][1]~x[0][3] hit the cache
   x[1][1]~x[1][3] hit the cache
   ...
   x[0][124] => miss and cache s31 block0
   x[1][124] => miss and cache s31 block1
   => 25% missing rate.
   no matter how larger S becomes, it works the same as C.
E. Yes.
   suppose B = 32
   x[0][0] => miss and cache s1 block0
   x[0][1]~x[0][7] hit the cache
   => 12.5% missing rate.
